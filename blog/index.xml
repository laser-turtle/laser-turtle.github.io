<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>A Blog</title>
        <link>/blog/</link>
        <description>A blog description</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright &amp;copy; 2022 - Laser Turtle</copyright><lastBuildDate>Mon, 01 May 2023 12:34:56 -0700</lastBuildDate>
            <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Quasirandom Sequences</title>
    <link>/blog/posts/quasi-random/</link>
    <pubDate>Mon, 01 May 2023 12:34:56 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/quasi-random/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I saw a <a href="https://news.ycombinator.com/item?id=35739629" target="_blank" rel="noopener noreffer ">Hacker News post</a> the other day about Fibonacci hashing and through that rabbit hole found out about <a href="http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/" target="_blank" rel="noopener noreffer ">this article</a> on qausirandom sequences. It&rsquo;s a fantastic article, but this mini-post will serve to highlight some cool takeaways I got from reading that post.</p>]]></description>
</item>
<item>
    <title>Build A Compiler - Variables</title>
    <link>/blog/posts/build-a-compiler-2-variables/</link>
    <pubDate>Mon, 14 Nov 2022 12:34:56 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/build-a-compiler-2-variables/</guid>
    <description><![CDATA[<blockquote>
<p>Note: This is the second part of the series, post 1 can be found <a href="/posts/build-a-compiler" rel="">here</a></p>
</blockquote>
<h2 id="introduction">Introduction</h2>
<p>This installment of the build-a-compiler series will cover global variables, and multi-expression programs. Currently the compiler is a glorified calculator, but adding the ability to store calculations for later use will bring us one step closer to a full programming language. The full code for this article is available <a href="https://github.com/laser-turtle/calc-compiler/tree/variables" target="_blank" rel="noopener noreffer ">here</a>, note that it&rsquo;s under the <code>variables</code> branch.</p>]]></description>
</item>
<item>
    <title>Build A Compiler</title>
    <link>/blog/posts/build-a-compiler/</link>
    <pubDate>Fri, 05 Aug 2022 12:34:56 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/build-a-compiler/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This post will cover how to build a native compiler for a very simple language.
It&rsquo;ll start small by building a native compiler for a small calculator language. Later installments will add on to this base with more advanced features like arrays, structs, functions, strings, and more. Some code and explanation will be omitted for brevity, but the full working code base can be found <a href="https://github.com/laser-turtle/calc-compiler" target="_blank" rel="noopener noreffer ">here</a>.</p>]]></description>
</item>
<item>
    <title>CRT Shader</title>
    <link>/blog/posts/crt_shader/</link>
    <pubDate>Thu, 01 Apr 2021 21:49:09 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/crt_shader/</guid>
    <description><![CDATA[<h2 id="shader">Shader</h2>
<p>CRT Shader, or something.</p>
<iframe src='/html/crt_shader.html' width='500px' height='300px'></iframe>
<h2 id="code">Code</h2>
<h3 id="vertex-shader">Vertex Shader</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-glsl">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-glsl" data-lang="glsl"><span class="line"><span class="cl"><span class="k">attribute</span> <span class="k">vec2</span> <span class="n">position</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">varying</span> <span class="k">vec2</span> <span class="n">vPosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">vPosition</span> <span class="o">=</span> <span class="n">position</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">gl_Position</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="fragment-shader">Fragment Shader</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-glsl">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-glsl" data-lang="glsl"><span class="line"><span class="cl"><span class="k">precision</span> <span class="k">highp</span> <span class="k">float</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">varying</span> <span class="k">vec2</span> <span class="n">vPosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">uniform</span> <span class="k">float</span> <span class="n">uTime</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">uniform</span> <span class="k">sampler2D</span> <span class="n">uSampler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">void</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">vec2</span> <span class="n">ndc</span> <span class="o">=</span> <span class="n">vPosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Bend the texture coordinates across a sphere-ish thing</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Add some scan-line noise</span>
</span></span><span class="line"><span class="cl">    <span class="k">vec2</span> <span class="n">tpos</span> <span class="o">=</span> <span class="n">vPosition</span> <span class="o">*</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">tpos</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">sin</span><span class="p">(</span><span class="n">tpos</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="mf">205.</span> <span class="o">+</span> <span class="n">uTime</span><span class="o">*</span><span class="mf">30.</span><span class="p">)</span><span class="o">*</span><span class="mf">0.00060</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">vec4</span> <span class="n">color</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">uSampler</span><span class="p">,</span> <span class="n">tpos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="k">float</span> <span class="n">strip_mix</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Every other line is faded... interpolation effect</span>
</span></span><span class="line"><span class="cl">    <span class="k">float</span> <span class="n">strip</span> <span class="o">=</span> <span class="n">tpos</span><span class="p">.</span><span class="n">t</span> <span class="o">*</span> <span class="n">mix</span><span class="p">(</span><span class="mf">50.0</span><span class="p">,</span> <span class="mf">100.0</span><span class="p">,</span> <span class="n">strip_mix</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">float</span> <span class="n">stripFac</span> <span class="o">=</span> 
</span></span><span class="line"><span class="cl">        <span class="mf">1.0</span> <span class="o">+</span> <span class="mf">0.25</span> 
</span></span><span class="line"><span class="cl">            <span class="o">*</span> <span class="n">strip_mix</span> 
</span></span><span class="line"><span class="cl">            <span class="o">*</span> <span class="p">(</span><span class="n">step</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">strip</span><span class="o">-</span><span class="k">float</span><span class="p">(</span><span class="k">int</span><span class="p">(</span><span class="n">strip</span><span class="p">)))</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">.</span><span class="n">rgb</span> <span class="o">*</span> <span class="n">stripFac</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>]]></description>
</item>
<item>
    <title>Math Battle</title>
    <link>/blog/posts/math-battle/</link>
    <pubDate>Wed, 07 Oct 2020 17:22:15 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/math-battle/</guid>
    <description><![CDATA[<h2 id="description">Description</h2>
<p>A game where you need to write math functions to guide your missile. A player wins when their math function intersects the other players circle. The asteriods were originally supposed to be destructable, but I did not finish it. Instead, the red circles are supposed to represent the missing regions of the asteroids. So the missiles should ignore the red circle regions allowing enough hits to bore through an asteroid. I think there&rsquo;s a bug somewhere in the collision detection or rendering, because it seems to take a few hits for some of the circles to register.</p>]]></description>
</item>
<item>
    <title>ErgoDox EZ Trackball Mod</title>
    <link>/blog/posts/erogodox-ez-trackball/</link>
    <pubDate>Sat, 29 Aug 2020 21:45:30 &#43;0000</pubDate>
    <author>Author</author>
    <guid>/blog/posts/erogodox-ez-trackball/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Recently I purchased an <a href="https://ergodox-ez.com/" target="_blank" rel="noopener noreffer ">ErgoDox EZ</a> ergonomic keyboard. I figured if I&rsquo;m going to spend all my time at the computer, might as well save my wrists. I was also excited about the open source nature of the ErgoDox and the rave reviews. I have a friend who&rsquo;s used one for years and loves it. I almost purchased the new Moonlander, but there weren&rsquo;t enough reviews yet, so I went with the EZ.</p>]]></description>
</item>
<item>
    <title>Getting Started With Incr_dom - Part 3</title>
    <link>/blog/posts/incr-dom-3/</link>
    <pubDate>Sun, 01 Sep 2019 14:04:57 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/incr-dom-3/</guid>
    <description><![CDATA[<blockquote>
<p>Note: Incr dom is superceded by a new, much easier to use library called <a href="https://github.com/janestreet/bonsai" target="_blank" rel="noopener noreffer ">Bonsai</a></p>
</blockquote>
<p>In this installment of the tutorial we&rsquo;ll get the basics of the Tetris game working. We&rsquo;ll create a 10x24 space board and use the standard pieces. There will be a preview box, score, and line clear animation.</p>]]></description>
</item>
<item>
    <title>Getting Started With Incr_dom - Part 2</title>
    <link>/blog/posts/incr-dom-2/</link>
    <pubDate>Sat, 31 Aug 2019 18:18:28 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/incr-dom-2/</guid>
    <description><![CDATA[<blockquote>
<p>Note: Incr dom is superceded by a new, much easier to use library called <a href="https://github.com/janestreet/bonsai" target="_blank" rel="noopener noreffer ">Bonsai</a></p>
</blockquote>
<p>This installment will add the basic frame of the single page application. We&rsquo;ll create a menu and be able to navigate between the various pages. In later chapters we&rsquo;ll fill in the contents of each of the pages. The result of this part is shown below (interactive):</p>]]></description>
</item>
<item>
    <title>Getting Started With Incr_dom - Part 1</title>
    <link>/blog/posts/incr-dom/</link>
    <pubDate>Sun, 25 Aug 2019 19:59:06 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/incr-dom/</guid>
    <description><![CDATA[<blockquote>
<p>Note: Incr dom is superceded by a new, much easier to use library called <a href="https://github.com/janestreet/bonsai" target="_blank" rel="noopener noreffer ">Bonsai</a></p>
</blockquote>
<p><a href="https://github.com/janestreet/incr_dom" target="_blank" rel="noopener noreffer ">Incr_dom</a> is a library created by <a href="https://www.janestreet.com/" target="_blank" rel="noopener noreffer ">Jane Street</a> for building web applications using OCaml. The interesting thing about Incr_dom is it&rsquo;s built on another one of Jane Street&rsquo;s libraries, called <a href="https://opensource.janestreet.com/incremental/" target="_blank" rel="noopener noreffer ">Incremental</a>. Incremental lets you memoize parts of your application to avoid unnecessary computations. When you combine incremental with something like the <a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="noopener noreffer ">virtual-dom</a> you get very speedy web applications. This is the topic of today&rsquo;s article. We&rsquo;ll be building a very simple &lsquo;Single Page (Web) Application&rsquo; using Incr_dom. The application will be a simple game of Tetris. It&rsquo;ll include the main menu, a leaderboard viewer, settings page, and of course the game itself.</p>]]></description>
</item>
<item>
    <title>Maze Program</title>
    <link>/blog/posts/maze/</link>
    <pubDate>Mon, 27 May 2019 22:25:15 -0700</pubDate>
    <author>Author</author>
    <guid>/blog/posts/maze/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This is part of an old program series I&rsquo;ll be writing up. During college I was into <a href="https://en.wikipedia.org/wiki/Computer_graphics" target="_blank" rel="noopener noreffer ">Computer Graphics</a>, Compilers, Operating Systems, anything that got to the &ldquo;heart&rdquo; of practical computing. Our lab machines were running Solaris at the time (or maybe it was Ubuntu at that point?) and there was a pretty generous screensaver <a href="https://www.jwz.org/xscreensaver/screenshots/" target="_blank" rel="noopener noreffer ">collection</a> installed on them. One day something like this <a href="https://www.youtube.com/watch?v=-u4neMXIRA8" target="_blank" rel="noopener noreffer ">Maze Screensaver</a> was running and I got curious how mazes were generated.</p>]]></description>
</item>
</channel>
</rss>
